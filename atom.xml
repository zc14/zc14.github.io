<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[zc14-紫竹林]]></title>
  <subtitle><![CDATA[叽里呱啦]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zc14.github.io/"/>
  <updated>2015-12-27T07:21:56.829Z</updated>
  <id>http://zc14.github.io/</id>
  
  <author>
    <name><![CDATA[周聪]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java并发编程的艺术]]></title>
    <link href="http://zc14.github.io/2015/12/27/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://zc14.github.io/2015/12/27/Java并发编程的艺术/</id>
    <published>2015-12-27T03:27:03.000Z</published>
    <updated>2015-12-27T07:21:56.829Z</updated>
    <content type="html"><![CDATA[<p>Java并发编程的艺术读书笔记<br><a id="more"></a></p>
<h2 id="数据库连接池">数据库连接池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个简单的数据库连接池示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (initialSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; i++) &#123;</span><br><span class="line">				pool.addLast(ConnectionDriver.createConnection());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection connection)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line">				<span class="comment">// 连接释放后需要进行通知，这样其他消费者能够感知到连接池中已经归还了一个连接</span></span><br><span class="line">				pool.addLast(connection);</span><br><span class="line">				pool.notifyAll();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在mills内无法获取到连接，将会返回null</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Connection <span class="title">fetchConnection</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line">			<span class="comment">// 完全超时</span></span><br><span class="line">			<span class="keyword">if</span> (mills &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">while</span> (pool.isEmpty()) &#123;</span><br><span class="line">					pool.wait();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> pool.removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">long</span> future = System.currentTimeMillis() + mills;</span><br><span class="line">				<span class="keyword">long</span> remaining = mills;</span><br><span class="line">				<span class="keyword">while</span> (pool.isEmpty() &amp;&amp; remaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					pool.wait(remaining);</span><br><span class="line">					remaining = future - System.currentTimeMillis();</span><br><span class="line">				&#125;</span><br><span class="line">				Connection result = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">if</span> (!pool.isEmpty()) &#123;</span><br><span class="line">					result = pool.removeFirst();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实的实现应该是由数据库驱动提供方法来实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">				<span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (method.getName().equals(<span class="string">"commit"</span>)) &#123;</span><br><span class="line">				TimeUnit.MICROSECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建一个Connection的代理，在commit时休眠100毫秒</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Connection <span class="title">createConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (Connection) Proxy.newProxyInstance(</span><br><span class="line">				ConnectionDriver.class.getClassLoader(),</span><br><span class="line">				<span class="keyword">new</span> Class&lt;?&gt;[] &#123; Connection.class &#125;, <span class="keyword">new</span> ConnectionHandler());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> ConnectionPool pool = <span class="keyword">new</span> ConnectionPool(<span class="number">10</span>);</span><br><span class="line">	<span class="comment">// 保证所有ConnectionRunner能够同时开始</span></span><br><span class="line">	<span class="keyword">static</span> CountDownLatch start = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	<span class="comment">// main线程将会等待所有的ConnectionRunner结束后才能继续执行</span></span><br><span class="line">	<span class="keyword">static</span> CountDownLatch end;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 线程数量，可以修改线程数量进行观察</span></span><br><span class="line">		<span class="keyword">int</span> threadCount = <span class="number">5000</span>;</span><br><span class="line">		end = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line">		AtomicInteger got = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">		AtomicInteger notGot = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">			Thread thread = <span class="keyword">new</span> Thread(</span><br><span class="line">					<span class="keyword">new</span> ConnectionRunner(count, got, notGot),</span><br><span class="line">					<span class="string">"ConnectionRunnerThread"</span>);</span><br><span class="line">			thread.start();</span><br><span class="line">		&#125;</span><br><span class="line">		start.countDown();</span><br><span class="line">		end.await();</span><br><span class="line">		System.out.println(<span class="string">"total invoke: "</span> + (threadCount * count));</span><br><span class="line">		System.out.println(<span class="string">"got connection: "</span> + got);</span><br><span class="line">		System.out.println(<span class="string">"not got connection: "</span> + notGot);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count;</span><br><span class="line">		AtomicInteger got;</span><br><span class="line">		AtomicInteger notGot;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ConnectionRunner</span><span class="params">(<span class="keyword">int</span> count, AtomicInteger got,</span><br><span class="line">				AtomicInteger notGot)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.count = count;</span><br><span class="line">			<span class="keyword">this</span>.got = got;</span><br><span class="line">			<span class="keyword">this</span>.notGot = notGot;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				start.await();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// 从线程池中获取连接，如果1000ms内无法获取到，将会返回null</span></span><br><span class="line">					<span class="comment">// 分别统计连接获取的数量got和未获取到连接的数量notGot</span></span><br><span class="line">					Connection connection = pool.fetchConnection(<span class="number">1000</span>);</span><br><span class="line">					<span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							connection.createStatement();</span><br><span class="line">							connection.commit();</span><br><span class="line">						&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">							pool.releaseConnection(connection);</span><br><span class="line">							got.incrementAndGet();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						notGot.incrementAndGet();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">					count--;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			end.countDown();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程池">线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程池技术</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadPool</span>&lt;<span class="title">Job</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 执行一个Job，这个Job需要实现Runnable</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Job job)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭线程池</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 增加工作者线程</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addWorkers</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 减少工作者线程</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">removeWorker</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 得到正在等待执行的任务数量</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getJobSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadPool</span>&lt;<span class="title">Job</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">implements</span> <span class="title">ThreadPool</span>&lt;<span class="title">Job</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//线程池最大限制数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_WORKER_NUMBERS  = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//线程池默认的数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_WORKER_NUMBERS = <span class="number">5</span>;</span><br><span class="line">	<span class="comment">//线程池最小的数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_WORKER_NUMBERS = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//这是一个工作列表，将会向里面插入工作</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Job&gt; jobs = <span class="keyword">new</span> LinkedList&lt;Job&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//工作者列表</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;Worker&gt; workers = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;Worker&gt;());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//工作者线程的数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> workerNum = DEFAULT_WORKER_NUMBERS;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//线程编号生成</span></span><br><span class="line">	<span class="keyword">private</span> AtomicLong threadNum = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		initializeWorkers(DEFAULT_WORKER_NUMBERS);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadPool</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">		workerNum = num &gt; MAX_WORKER_NUMBERS ? MAX_WORKER_NUMBERS : num &lt; MIN_WORKER_NUMBERS ? MIN_WORKER_NUMBERS : num;</span><br><span class="line">		initializeWorkers(workerNum);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Job job)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(job != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="comment">//添加一个工作，然后进行通知</span></span><br><span class="line">			<span class="keyword">synchronized</span>(jobs)&#123;</span><br><span class="line">				jobs.addLast(job);</span><br><span class="line">				jobs.notify();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Worker worker: workers)&#123;</span><br><span class="line">			worker.shutdown();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWorkers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(jobs)&#123;</span><br><span class="line">			<span class="comment">//限制新增的Worker数量不能超过最大值</span></span><br><span class="line">			<span class="keyword">if</span>( num + <span class="keyword">this</span>.workerNum &gt; MAX_WORKER_NUMBERS)&#123;</span><br><span class="line">				num = MAX_WORKER_NUMBERS - <span class="keyword">this</span>.workerNum;</span><br><span class="line">			&#125;</span><br><span class="line">			initializeWorkers(num);</span><br><span class="line">			<span class="keyword">this</span>.workerNum += num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeWorker</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(jobs)&#123;</span><br><span class="line">			<span class="keyword">if</span>(num &gt;= <span class="keyword">this</span>.workerNum)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"beyond workNum"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//按照给定的数量停止Worker</span></span><br><span class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(count &lt; num)&#123;</span><br><span class="line">				Worker worker = workers.get(count);</span><br><span class="line">				<span class="keyword">if</span>(workers.remove(worker))&#123;</span><br><span class="line">					worker.shutdown();</span><br><span class="line">					count++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.workerNum -= count;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getJobSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> jobs.size();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化线程工作者</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeWorkers</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num;i++)&#123;</span><br><span class="line">			Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">			workers.add(worker);</span><br><span class="line">			Thread thread = <span class="keyword">new</span> Thread(worker,<span class="string">"ThreadPool-Worker-"</span>+threadNum.incrementAndGet());</span><br><span class="line">			thread.start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//工作者，负责消费任务</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">		<span class="comment">//是否工作</span></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(running)&#123;</span><br><span class="line">				Job job = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">synchronized</span>(jobs)&#123;</span><br><span class="line">					<span class="comment">//如果工作者列表是空的，那么就wait</span></span><br><span class="line">					<span class="keyword">while</span>(jobs.isEmpty())&#123;</span><br><span class="line">						<span class="keyword">try</span>&#123;</span><br><span class="line">							jobs.wait();</span><br><span class="line">						&#125;<span class="keyword">catch</span>(InterruptedException ex)&#123;</span><br><span class="line">							<span class="comment">//感知到外部对WorkerThread的中断操作，返回</span></span><br><span class="line">							Thread.currentThread().interrupt();</span><br><span class="line">							<span class="keyword">return</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">//取出一个Job</span></span><br><span class="line">					job = jobs.removeFirst();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(job != <span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">try</span>&#123;</span><br><span class="line">						job.run();</span><br><span class="line">					&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">						<span class="comment">//忽略job执行中的Exception</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">			running = <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个基于线程池技术的简单Web服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHttpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理HttpRequest的线程池</span></span><br><span class="line">	<span class="keyword">static</span> ThreadPool&lt;HttpRequestHandler&gt; threadPool = <span class="keyword">new</span> DefaultThreadPool&lt;HttpRequestHandler&gt;(</span><br><span class="line">			<span class="number">1</span>);</span><br><span class="line">	<span class="comment">// SimpleHttpServer的根路径</span></span><br><span class="line">	<span class="keyword">static</span> String basePath;</span><br><span class="line">	<span class="keyword">static</span> ServerSocket serverSocket;</span><br><span class="line">	<span class="comment">// 服务监听端口</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (port &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			SimpleHttpServer.port = port;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBasePath</span><span class="params">(String basePath)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (basePath != <span class="keyword">null</span> &amp;&amp; <span class="keyword">new</span> File(basePath).exists()</span><br><span class="line">				&amp;&amp; <span class="keyword">new</span> File(basePath).isDirectory()) &#123;</span><br><span class="line">			SimpleHttpServer.basePath = basePath;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动SimpleHttpServer</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> ((socket = serverSocket.accept()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 接收一个客户端Socket，生成一个HttpRequestHandler，放入线程池执行</span></span><br><span class="line">			threadPool.execute(<span class="keyword">new</span> HttpRequestHandler(socket));</span><br><span class="line">		&#125;</span><br><span class="line">		serverSocket.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">HttpRequestHandler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.socket = socket;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			String line = <span class="keyword">null</span>;</span><br><span class="line">			BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">			BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">			PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">			InputStream in = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">						socket.getInputStream()));</span><br><span class="line">				String header = reader.readLine();</span><br><span class="line">				<span class="comment">// 由相对路径计算出绝对路径</span></span><br><span class="line">				String filePath = basePath + header.split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">				out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">				<span class="comment">// 如果请求资源的后缀为jpg或者ico，则读取资源并输出</span></span><br><span class="line">				<span class="keyword">if</span> (filePath.endsWith(<span class="string">"jpg"</span>) || filePath.endsWith(<span class="string">"ico"</span>)) &#123;</span><br><span class="line">					in = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">					ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">					<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">while</span> ((i = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">						baos.write(i);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">byte</span>[] array = baos.toByteArray();</span><br><span class="line">					out.println(<span class="string">"HTTP/1.1 200 OK"</span>);</span><br><span class="line">					out.println(<span class="string">"Content-Type: image/jpeg"</span>);</span><br><span class="line">					out.println(<span class="string">"Content-Length: "</span> + array.length);</span><br><span class="line">					out.println(<span class="string">""</span>);</span><br><span class="line">					socket.getOutputStream().write(array, <span class="number">0</span>, array.length);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">							<span class="keyword">new</span> FileInputStream(filePath)));</span><br><span class="line">					out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">					out.println(<span class="string">"HTTP/1.1 200 OK"</span>);</span><br><span class="line">					out.println(<span class="string">"Content-Type: text/html; charset=UTF-8"</span>);</span><br><span class="line">					out.println(<span class="string">""</span>);</span><br><span class="line">					<span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">						out.println(line);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				out.flush();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				out.println(<span class="string">"HTTP/1.1 500"</span>);</span><br><span class="line">				out.println(<span class="string">""</span>);</span><br><span class="line">				out.flush();</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				close(br, in, reader, out, socket);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭流或者Socket</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (closeables != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Closeable closeable : closeables) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					closeable.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">					<span class="comment">// 忽略</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基于线程池实现的简单web服务器">基于线程池实现的简单web服务器</h2><h2 id="Java中的锁_Lock/Condition">Java中的锁 Lock/Condition</h2><h2 id="Java_并发容器和框架">Java 并发容器和框架</h2><h3 id="ConcurrentHashMap">ConcurrentHashMap</h3><p>   ConcurrentHashMap - 多个segment组成。采用了可重入锁ReentrantLock HashEntry。<br>   为了提高效率，ConcurrentHashMap不会对整个容器进行扩容，而只对某个segment进行扩容。</p>
<h3 id="COncurrentLinkedQueue">COncurrentLinkedQueue</h3><p>   线程安全的队列。两种实现方式：1使用阻塞算法（锁）。2使用非阻塞算法（CAS）。</p>
<h3 id="Java中的阻塞队列">Java中的阻塞队列</h3><p>   ArrayBlockingQueue<br>   …</p>
<h3 id="Fork/Join框架">Fork/Join框架</h3><pre><code>工作窃取算法 <span class="literal">A</span>线程执行完自己的任务，从队列尾部窃取B线程中未执行的任务。
</code></pre><h2 id="Java中的并发工具类">Java中的并发工具类</h2><h3 id="等待多线程完成的CountDownLatch">等待多线程完成的CountDownLatch</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch c = new CountDownLatch()<span class="comment">;</span></span><br><span class="line">c.countDown()<span class="comment">;</span></span><br><span class="line">c.await()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<pre><code>迅雷下载。
</code></pre><h3 id="同步屏障CyclicBarrier">同步屏障CyclicBarrier</h3><pre><code>张孝祥老师的例子-团队建设。去游玩。 集合-到达目的地-吃午饭-继续逛-集合-回家。等到最后一个满足条件，才去执行下一步。
</code></pre><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//银行流水处理服务类</span><br><span class="line">public class <span class="type">BankWaterService</span> implements <span class="type">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">	// 创建<span class="number">4</span>个屏障，处理完之后执行当前类的run方法</span><br><span class="line">	private <span class="type">CyclicBarrier</span> c = new <span class="type">CyclicBarrier</span>(<span class="number">4</span>, this);</span><br><span class="line"></span><br><span class="line">	// 假设只有<span class="number">4</span>个sheet，所以启动<span class="number">4</span>个线程</span><br><span class="line">	private <span class="type">Executor</span> executor = <span class="type">Executors</span>.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	// 保存每个sheet计算出来的银行流水结果</span><br><span class="line">	private <span class="type">ConcurrentHashMap</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt; sheetBankWaterCount = new <span class="type">ConcurrentHashMap</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt;();</span><br><span class="line"></span><br><span class="line">	private <span class="type">void</span> count() &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			executor.execute(new <span class="type">Runnable</span>() &#123;</span><br><span class="line">				@<span class="type">Override</span></span><br><span class="line">				public <span class="type">void</span> run() &#123;</span><br><span class="line">					// 计算当前sheet的银行流水数据，计算代码省略</span><br><span class="line">					sheetBankWaterCount</span><br><span class="line">							.put(<span class="type">Thread</span>.currentThread().getName(), <span class="number">1</span>);</span><br><span class="line">					// 银行流水计算完成，插入一个屏障</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						c.await();</span><br><span class="line">					&#125; catch (<span class="type">InterruptedException</span> | <span class="type">BrokenBarrierException</span> e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">void</span> run() &#123;</span><br><span class="line">		<span class="type">int</span> <span class="literal">result</span> = <span class="number">0</span>;</span><br><span class="line">		// 汇总每个sheet计算出的结果</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt; sheet : sheetBankWaterCount.entrySet()) &#123;</span><br><span class="line">			<span class="literal">result</span> += sheet.getValue();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		// 将计算结果输出</span><br><span class="line">		sheetBankWaterCount.put(<span class="string">"result"</span>, <span class="literal">result</span>);</span><br><span class="line">		<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args)&#123;</span><br><span class="line">		<span class="type">BankWaterService</span> bankWaterCount = new <span class="type">BankWaterService</span>();</span><br><span class="line">		bankWaterCount.count();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="控制并发线程数的Semaphore">控制并发线程数的Semaphore</h3><pre><code>银行排队。
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> SemaphoreTest &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">int</span> THREAD_COUNT = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">			threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">				@<span class="function">Override</span><br><span class="line">				<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						s.acquire();</span><br><span class="line">						Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">						System.out.println(<span class="string">"save data"</span>);</span><br><span class="line">						s.release();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		threadPool.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程间交换数据的Exchanger">线程间交换数据的Exchanger</h3><p>张孝祥老师的例子- 模拟毒品交易</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Exchanger&lt;String&gt; exgr       = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService         threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String A = <span class="string">"银行流水A"</span>;<span class="comment">// A录入银行流水数据</span></span><br><span class="line">                    exgr.exchange(A);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String B = <span class="string">"银行流水B"</span>;<span class="comment">// B录入银行流水数据</span></span><br><span class="line">                    String A = exgr.exchange(<span class="string">"B"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"A和B数据是否一致："</span> + A.equals(B) + <span class="string">"，A录入的是："</span> + A + <span class="string">"，B录入是："</span> + B);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Java中的线程池">Java中的线程池</h2><pre><code>ThreadPoolExrcutor
</code></pre><h2 id="Executor框架">Executor框架</h2><p>   FutureTask<br>   ThreadPoolExrcutor<br>   ScheduledThreadPoolExecutor</p>
<h2 id="Java并发编程实战">Java并发编程实战</h2><p>   生产者或消费者模式<br>   <strong>通过一个容器来解决生产者和消费者的强耦合，生产者和消费者不直接通信，通过一个阻塞队列来平衡二者。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java并发编程的艺术读书笔记<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[异常]]></title>
    <link href="http://zc14.github.io/2015/12/23/%E5%BC%82%E5%B8%B8/"/>
    <id>http://zc14.github.io/2015/12/23/异常/</id>
    <published>2015-12-23T05:20:46.000Z</published>
    <updated>2015-12-25T00:52:53.126Z</updated>
    <content type="html"><![CDATA[<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class ExceptionsTest &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">String</span> input = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="keyword">String</span> capitalized = capitalize(input);</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"$$$$"</span>+capitalized);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"~~~~"</span>+e.toString());</span><br><span class="line">			<span class="comment">//throw new RuntimeException("goodbye");</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>(capitalize(<span class="string">"name"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> capitalize(<span class="keyword">String</span> s) <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == s) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Your passed a null argument"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Character firstChar = s.charAt(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">String</span> theRest = s.substring(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> firstChar.toString().toUpperCase() + theRest;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><em><br>~~~~java.lang.NullPointerException: Your passed a null argument<br>Name
</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[初始化加载顺序]]></title>
    <link href="http://zc14.github.io/2015/12/23/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <id>http://zc14.github.io/2015/12/23/初始化加载顺序/</id>
    <published>2015-12-23T02:00:40.000Z</published>
    <updated>2015-12-25T00:53:00.203Z</updated>
    <content type="html"><![CDATA[<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InitTest03</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InitTest03</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InitTest03</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.x = x;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		y = x * <span class="number">2</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"static initialization"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#123;</span><br><span class="line">		y = x * <span class="number">4</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">		InitTest03 test = <span class="keyword">new</span> InitTest03();</span><br><span class="line">		InitTest03 moreTest = <span class="keyword">new</span> InitTest03();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>static initialization<br>12<br>6<br>12<br>6
</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="l]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[回调函数]]></title>
    <link href="http://zc14.github.io/2015/12/22/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://zc14.github.io/2015/12/22/回调函数/</id>
    <published>2015-12-22T07:35:36.000Z</published>
    <updated>2015-12-27T07:23:23.310Z</updated>
    <content type="html"><![CDATA[<p>学习模板方法的时候发现的。<br>java中的回调函数，是通过匿名内部类来实现的。<br>Spring也是这么用的，好好学习下。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">handler</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJdbcQueryTemplate</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(String sql,ResultHandler&lt;T&gt; <span class="keyword">handler</span>)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">handler</span>.<span class="title">handler</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class <span class="type">Test</span>&#123;</span><br><span class="line">  public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args)&#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="literal">result</span> = new <span class="type">SimpleJdbcQueryTemplate</span>().query(</span><br><span class="line">      new <span class="type">ResultHandler</span>&lt;<span class="type">Boolean</span>&gt;()&#123;</span><br><span class="line">        public <span class="type">String</span> query()&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"一个小小的测试。"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>学习模板方法的时候发现的。<br>java中的回调函数，是通过匿名内部类来实现的。<br>Spring也是这么用的，好好学习下。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java解惑]]></title>
    <link href="http://zc14.github.io/2015/12/20/Java%E8%A7%A3%E6%83%91/"/>
    <id>http://zc14.github.io/2015/12/20/Java解惑/</id>
    <published>2015-12-20T06:52:24.000Z</published>
    <updated>2015-12-27T07:07:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="表达式之谜">表达式之谜</h1><h2 id="谜题1_奇偶性">谜题1 奇偶性</h2><pre><code>i%<span class="number">2</span> == <span class="number">0</span> 
优化 (i &amp; <span class="number">1</span>) == <span class="number">0</span>
</code></pre><h2 id="谜题2_找零时刻">谜题2 找零时刻</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">2.00</span> - <span class="number">1.10</span>);</span><br><span class="line"><span class="comment">//输出结果：0.8999999999999999</span></span><br></pre></td></tr></table></figure>
<p>原因:<strong>并不是所有的小数都可以用二进制浮点数精确表示。在需要精确答案的地方，要避免使用float和double;对于货币计算，要使用int，long或BigDecimal。</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">.1</span>));</span><br><span class="line"> <span class="comment">//输出结果：0.1000000000000000055511151231257827021181583404541015625</span></span><br><span class="line"></span><br><span class="line"> 一定要用BigDecimal(<span class="keyword">String</span>)构造器，而千万不要用BigDecimal(<span class="keyword">double</span>)</span><br><span class="line"></span><br><span class="line"> System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="string">"2.00"</span>).subtract(<span class="keyword">new</span> BigDecimal(<span class="string">"1.10"</span>)));</span><br><span class="line"><span class="comment">//输出结果：0.90</span></span><br></pre></td></tr></table></figure></p>
<h2 id="谜题3_长整除">谜题3 长整除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final <span class="keyword">long</span> MICROS_PER_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line">       final <span class="keyword">long</span> MILLIS_PER_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(MICROS_PER_DAY / MILLIS_PER_DAY);</span><br><span class="line"><span class="comment">//输出结果：5，而不是预期的1000</span></span><br></pre></td></tr></table></figure>
<p><strong>当你要操作很大的数字时，千万要提防溢出—-它可是一个缄默的杀手</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final <span class="keyword">long</span> MICROS_PER_DAY = <span class="number">24L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line">       final <span class="keyword">long</span> MILLIS_PER_DAY = <span class="number">24L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(MICROS_PER_DAY / MILLIS_PER_DAY);</span><br><span class="line"><span class="comment">//输出结果：1000</span></span><br></pre></td></tr></table></figure></p>
<h2 id="谜题4_初级问题">谜题4 初级问题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">12345</span> + <span class="number">5432l</span>);</span><br><span class="line"><span class="comment">//输出结果：17777</span></span><br></pre></td></tr></table></figure>
<p><strong>在long类型字面常量中，一定要用大写的L，千万不要用小写的l</strong></p>
<h2 id="谜题5_十六进制的趣事">谜题5 十六进制的趣事</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">System</span><span class="class">.out</span><span class="class">.println</span>(<span class="tag">Long</span><span class="class">.toHexString</span>(0<span class="tag">x100000000L</span> + 0<span class="tag">xcafebabe</span>));</span><br></pre></td></tr></table></figure>
<p><strong>如果十六进制和八进制字面常量的最高位被置位了，那么他们就是负数。通常最好是避免混合类型的计算。</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">System</span><span class="class">.out</span><span class="class">.println</span>(<span class="tag">Long</span><span class="class">.toHexString</span>(0<span class="tag">x100000000L</span> + 0<span class="tag">xcafebabeL</span>));</span><br></pre></td></tr></table></figure>
<h2 id="谜题6_多重转型">谜题6 多重转型</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.<span class="keyword">out</span>.println((<span class="keyword">int</span>) (<span class="keyword">char</span>) (<span class="keyword">byte</span>) -<span class="number">1</span>);</span><br><span class="line"><span class="comment">//输出结果： 65535  32-&gt;8-&gt;16-&gt;32</span></span><br><span class="line">不能用一个<span class="keyword">char</span>表示一个负的<span class="keyword">byte</span>数值。</span><br></pre></td></tr></table></figure>
<p><strong>如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。</strong></p>
<h2 id="谜题7_互换内容">谜题7 互换内容</h2><p>不重要</p>
<h2 id="谜题8_Dos_Equais">谜题8 Dos Equais</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">char</span> x = <span class="string">'X'</span>;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> System.out.print(<span class="literal">true</span>  ? x : <span class="number">0</span>);</span><br><span class="line"> System.out.print(<span class="literal">false</span> ? i : x); </span><br><span class="line">输出结果：X88</span><br></pre></td></tr></table></figure>
<p><strong>如果一个操作数的类型是T，T表示byte，short或char，而另一个操作类型是int。他的值可以用类型T表示，那么三目运算符的类型就是T。</strong></p>
<h2 id="谜题9_半斤">谜题9 半斤</h2><h2 id="谜题10_八两">谜题10 八两</h2><h2 id="谜题11_最后的笑声">谜题11 最后的笑声</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LastLaugh</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"H"</span> + <span class="string">"a"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">'H'</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">'H'</span> + <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Ha</span><br><span class="line">H</span><br><span class="line"><span class="number">169</span></span><br></pre></td></tr></table></figure>
<p><strong>当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作</strong></p>
<h2 id="谜题12_ABC">谜题12 ABC</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Abc</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        String letters = <span class="string">"ABC"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] numbers = &#123; <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span> &#125;;</span><br><span class="line">        System.<span class="keyword">out</span>.println(letters + <span class="string">" easy as "</span> + numbers);</span><br><span class="line">	System.<span class="keyword">out</span>.println(letters + <span class="string">" easy as "</span> + String.valueOf(numbers));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">ABC easy <span class="keyword">as</span> [C@<span class="number">659e0</span>bfd</span><br><span class="line">ABC easy <span class="keyword">as</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>
<p><strong>char数组不是字符串。要想将一个char数组转换成一个字符串，就要调用String.valueof(char[])方法</strong></p>
<h2 id="谜题13_动物庄园">谜题13 动物庄园</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class AnimalFarm &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> len = <span class="string">"10"</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> pig = <span class="string">"length: 10"</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> dog = <span class="string">"length: "</span> + pig.length();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> monkey = <span class="string">"length: "</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> duck = <span class="string">"length: "</span> + len;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Animals are equal: "</span> + pig == dog);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Animals are equal: "</span> + (pig == dog));</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Animals are equal: "</span> + (pig == monkey));</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Animals are equal: "</span> + (pig == duck));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">Animals are equal: <span class="keyword">false</span></span><br><span class="line">Animals are equal: <span class="keyword">true</span></span><br><span class="line">Animals are equal: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p><strong>在使用字符串连接操作符时，总是将重要的操作数用括号括起来。</strong></p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<pre><code>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="表达式之谜">表达式之谜</h1><h2 id="谜题1_奇偶性">谜题1 奇偶性</h2><pre><code>i%<span class="number">2</span> == <span class="number">0</span> 
优化 (i &am]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[金典-概念与算法]]></title>
    <link href="http://zc14.github.io/2015/12/15/%E9%87%91%E5%85%B8-%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>http://zc14.github.io/2015/12/15/金典-概念与算法/</id>
    <published>2015-12-15T05:09:03.000Z</published>
    <updated>2015-12-16T07:53:00.211Z</updated>
    <content type="html"><![CDATA[<h1 id="概念与算法">概念与算法</h1><h2 id="位操作">位操作</h2><ol>
<li>手工位运算<br>1000 - 0110  （0010）<br>1011 &amp; (~0 &lt;&lt; 2) （1000）</li>
<li><p>位操作原理与技巧<br>|”^”操作|”&amp;”操作|<br>|:—-:|:—-:|<br>|x^0 = x|x&amp;0 = 0|<br>|x^1 = ~x|x&amp;1 = x|<br>|x^x = 0|x&amp;x = x|</p>
</li>
<li><p>常见位操作：获取，设置，清除及更新位数据</p>
<ul>
<li><p>获取</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">getBit</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((num &amp; (<span class="number">1</span> &lt;&lt; i)) !=<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <em>该方法将1左移i位，得到形如00010000的值。接着，对这个值与num执行“位与”操作，从而将i位之外的所有位清零。<br>最后，检查该结果是否为零。不为零说明i位为1，否则，i位为0.</em></p>
</li>
<li><p>置位</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setBit</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num | (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>该方法先将1左移i位，得到形如00010000的值。接着，对这个值和num执行“位或”操作，这样只会改变i位的数据。<br>改掩码i位除外的位均为零，故而不会影响num的其余位。</em></p>
</li>
<li><p>清零</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearBit</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mask = ~(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">  <span class="keyword">return</span> num &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将num最高位至i位(含)清零的做法如下：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearBitsMSBthroughtI</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mask = (<span class="number">1</span> &lt;&lt; i) -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> num &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将i位至0位(含)清零的做法如下：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearBitsIthrought0</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mask = ~((<span class="number">1</span> &lt;&lt; (i+<span class="number">1</span>)) -<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> num &amp; mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>该方法与setBit刚好相反。首先，将1左移i位得到形如00010000的值，对这个值取反进而得到类似11101111的掩码。<br>接着，对该掩码和num执行“位与”操作。这样只会清零num的i位，其余位保持不变。</em></p>
</li>
<li>更新<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBit</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mask = ~(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">  <span class="keyword">return</span> ( num &amp; mask) | (v &lt;&lt; i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><em>此方法将setBit与clearBit合二为一。首先，用诸如11101111的掩码将num的第i位清零。<br>接着，将待写入值v左移i位，得到一个i位为v但其余位都为0的数。最后，对之前得到的两个结果执行“位或”操作，<br>v为1则将num的i位更新为1，否则该位仍为0.
</em></p>
</li>
</ol>
<h2 id="智力题">智力题</h2><ol>
<li>大声说出你的思路</li>
<li><p>总结规律与模式<br><em>给定两条绳子，每条绳子燃烧殆尽正好要用1个小时。怎样用这两条绳子准确计量15分钟？</em></p>
</li>
<li><p>略作变通</p>
</li>
<li>触类旁通</li>
</ol>
<h2 id="数学与概率">数学与概率</h2><ol>
<li><p>素数<br>每一个数都可以分解成素数乘积。<br><em>84 = 2的2次方 x 3的1次方 x 5的0次方 x 7的1次方 x 11的0次方 x 13的0次方 x 17的0次方…..</em></p>
<ul>
<li><p>素数检查</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">primeSlighrlyBetter</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(n &lt; <span class="number">2</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> <span class="built_in">sqrt</span> = (<span class="keyword">int</span>) Math.<span class="built_in">sqrt</span>(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;=<span class="built_in">sqrt</span>;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>( n %i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成素数序列：埃拉托斯特腻筛法<br>能非常高效地生成素数序列，原理是剔除所有可被素数整除的非素数。<br>原理：一开始列出到max为止的所有数字。首先，划掉所有可被2整除的数(2保留)。<br>然后，找到下一个素数(也即下一个不会被划掉的数)，并划掉所有可被它整除的数。划掉所有可被2，3，5，7，11等素数整除的数，最终课得到2到max之间的素数序列。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[] sieveOfEratosthenes(<span class="keyword">int</span> max)&#123;</span><br><span class="line">  <span class="keyword">boolean</span>[] flags = <span class="keyword">new</span> <span class="keyword">boolean</span>[max +<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  init(flags);<span class="comment">//将flags中0，1元素除外的所有元素设为true</span></span><br><span class="line">  <span class="keyword">int</span> prime = <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(prime &lt;= max)&#123;</span><br><span class="line">   <span class="comment">/*划掉余下为prime倍数的数字*/</span></span><br><span class="line">   crossOff(flags,prime);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*找出下一个为true的值*/</span></span><br><span class="line">   prime = getNextPrime(flags,prime);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(prime &gt;= flags.length)&#123;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flags;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> crossOff(<span class="keyword">boolean</span>[] flags,<span class="keyword">int</span> prime)&#123;</span><br><span class="line"> <span class="comment">/*划掉余下为prime倍数的数字，我们可以从(prime*prime)开始，因为如果k*prime且k &lt; prime,这个值早就在之前的迭代里被划掉了。*/</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = prime * prime;i &lt; flags.length;i +=prime)&#123;</span><br><span class="line">   flags[i] = <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> getNextPrime(<span class="keyword">boolean</span>[] flags,<span class="keyword">int</span> prime)&#123;</span><br><span class="line"> <span class="keyword">int</span> <span class="keyword">next</span> = prime +<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(<span class="keyword">next</span> &lt; flags.length &amp;&amp; !flags[<span class="keyword">next</span>])&#123;</span><br><span class="line">   <span class="keyword">next</span>++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ol>
<li><p>概率</p>
<ul>
<li>A与B都发生的概率<br>P(A与B都发生) = P(B发生，在A发生的情况下) <em> P(A发生)
</em>假设要在1到10之间挑选一个数。挑中一个偶数且这个数载1到5之间的概率有多大？*1/5</li>
<li>A或B发生的概率<br>P(A或B发生) = P(A发生) + P(B发生) - P(A与B都发生)<br><em>假设我们要在1到10之间挑选一个数。挑中的数为偶数或这个数1到5之间的概率有多大？</em>4/5</li>
<li><p>独立<br>若A与B相互独立(也即，一个事件的发生，推不出另一个事件的发生)。那么P(A与B都发生) = P(A)P(B)。这条规则直接推倒自P(A与B都发生) = P(A)P(B).</p>
</li>
<li><p>互斥<br>若A与B互斥(也即，若一个事件发生，则另一个事件就不可能发生)，则P(A或B发生) = P(A) + P(B)。这是因为P(A与B都发生) = 0，所以，删除了之前P(A或B发生)算式中的P(A与B都发生)一项。</p>
</li>
</ul>
</li>
</ol>
<h2 id="面向对象设计">面向对象设计</h2><ol>
<li>如何解答面向对象设计问题<ul>
<li>处理不明确的地方</li>
<li>定义核心对象</li>
<li>分析对象关系</li>
<li>研究对象的动作</li>
</ul>
</li>
<li>设计模式<ul>
<li>单例设计模式<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Restaurant</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Restaurant _instance = <span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">Resuaurant</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Restaurant <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">      _instance = <span class="keyword">new</span> Restaurant();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>工厂方法设计模式<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> CardGame&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> CardGame createCardGame(GameType <span class="class"><span class="keyword">type</span>)&#123;</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> </span>== GameType.Poker)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> PokerGame();</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> </span>== GameType.BlackJack)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlackJackGame();</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="递归和动态规划">递归和动态规划</h2><p>   当你听到问题是这么开头的：”设计一个算法，计算第n个……”,”编写代码列出前n个…….”,”实现一个方法，计算所有…..”等等，那么，这基本上就是一个递归问题。</p>
<ol>
<li>解决之道<br>从较小的子问题逐渐逼近原始问题。很多时候，只要在f(n-1)的解法中加入，移除某系东西或者稍作修改就能算出f(n).</li>
<li><p>动态规划<br>区别于递归，动态规划要对中间结果执行“缓存”操作，以备后续使用。<br><em>动态规划法简单实例：斐波那契数列</em></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改之前------------------------------</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(i == <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span>(i == <span class="number">1</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> fibonacci(i-<span class="number">1</span>) + fibonacci(i-<span class="number">2</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//修改之后------------------------------</span></span><br><span class="line"> <span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(i == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(fib[i] != <span class="number">0</span>) <span class="keyword">return</span> fib[i];<span class="comment">//返回先前缓存的结果</span></span><br><span class="line">  fib[i] = fibonacci(i-<span class="number">1</span>) + fibonacci(i-<span class="number">2</span>);<span class="comment">//缓存结果</span></span><br><span class="line">  <span class="keyword">return</span> fib[i];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>递归和迭代解法<br>递归算法的空间效率很低。每次递归调用都会在栈上增加一层，也就是说，若算法包含O(n)次递归调用，就要使用O(n)内存。不得了！</li>
</ol>
</li>
</ol>
<h2 id="扩展性与存储限制">扩展性与存储限制</h2><ol>
<li>循序渐进法<ul>
<li>大胆假设</li>
<li>切合实际</li>
<li>解决问题</li>
</ul>
</li>
<li>你需要知道的：信息，策略与问题</li>
<li>示例：查找所有包含某一组词的文件<br><em>给定数百万份文件，如何找出所有包含某一组词的文件？我们不关心这些词出现的顺序，但它们必须是完整的单词。也就是说，“book”与“bookkeeper”不是一回事。</em><br><strong>在着手解决问题之前，我们需要考虑findWords程序只用一次，还是要反复调用。假设需要多次调用findWords程序来扫描这些文件，那么，我们可以接受预处理的开销。</strong><ul>
<li>步骤1<br>先忘记我们有数以百万计的文件，假装只有几十个文件。在这种情况下，如何实现findWords呢？<br>一种方法是预处理每个文件，并创建一个散列表的索引。这个散列表会将词映射到含有这个词的一组文件。<br>“books” -&gt;{doc2,doc3,doc6,doc8}<br>“many” -&gt;{doc1,doc3,doc7,doc8,doc9}<br>若要查找 “many books”,只需要对”books”和”many”的值进行交集运算，于是得到结果{doc3,doc8}</li>
<li>步骤2<br>现在，回到最初的问题。若有数百万份文件，会有什么问题？首先，我们可能需要将文件分散到多台机器上。<br>文件分散到多台机器上会引出以下几个很关键的关注点。<br>  1）如何划分改散列表。（按关键字划分）某台机器上存放油包含某个单词的全部文件。<br>  2）划分数据完成，我们可能需要在一台机器上对文件进行处理，并将结果推送他其他机器上。<br>  3）我们需要找到一种方法获知哪台机器拥有哪些数据。</li>
<li>步骤3<br>为了找到匹配某一组字符串的所有文件，我们会先对这一组字符串进行排序，然后给每一台机器发送与字符对应的查找请求。例如，若带查找字符串为“after builds boat amaze banana”，一号机器开始查找包含“after” 与 “amaze” 的文件，并对这些文件执行交集运算。三号机器则处理{“banana”，“boat”，“builds”}这几个关键字，同样也会对文件进行交集运算。<br>最后，发送请求的机器在对一号机器及三号机器返回的结果作交集运算。<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">            “after builds boat amaze banana”</span><br><span class="line"> </span><br><span class="line"> Machine <span class="number">1</span>：“after amaze”       Machine <span class="number">3</span>：“builds boat banana”</span><br><span class="line"> </span><br><span class="line">“after” -&gt;<span class="annotation">doc</span><span class="number">1</span>,<span class="annotation">doc</span><span class="number">5</span>,<span class="annotation">doc</span><span class="number">7</span>       “builds” -&gt;<span class="annotation">doc</span><span class="number">3</span>,<span class="annotation">doc</span><span class="number">4</span>,<span class="annotation">doc</span><span class="number">5</span></span><br><span class="line">“amaze” -&gt;<span class="annotation">doc</span><span class="number">2</span>,<span class="annotation">doc</span><span class="number">5</span>,<span class="annotation">doc</span><span class="number">7</span>       “boat”   -&gt;<span class="annotation">doc</span><span class="number">2</span>,<span class="annotation">doc</span><span class="number">3</span>,<span class="annotation">doc</span><span class="number">5</span></span><br><span class="line">                               “banana” -&gt;<span class="annotation">doc</span><span class="number">3</span>,<span class="annotation">doc</span><span class="number">3</span>,<span class="annotation">doc</span><span class="number">5</span></span><br><span class="line">      </span><br><span class="line">      &#123;<span class="annotation">doc</span><span class="number">5</span>,<span class="annotation">doc</span><span class="number">7</span>&#125;               &#123;<span class="annotation">doc</span><span class="number">3</span>,<span class="annotation">doc</span><span class="number">5</span>&#125;</span><br><span class="line">      </span><br><span class="line">                  solution = <span class="annotation">doc</span><span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="排序与查找">排序与查找</h2><ol>
<li><p>排序算法<br>面试中常见的排序算法三种算法：归并排序(Merge Sort) 快速排序(Quick Sort) 基数排序(Radix Sort,桶排序)</p>
<ul>
<li>冒泡排序|执行时间： 平均情况与最差情况为O(n²)，存储空间：O(1).<br>冒泡排序（Bubble Sort）是先从数组第一个元素开始，依次比较相邻两个数，若前者比后者大，就将两者交换位置，然后处理下一对，依此类推，不断扫描数组，直到完成排序。</li>
<li>选择排序|执行时间：平均情况与最差情况为O(n²)，存储空间：O(1).<br>选择排序(Selecction Sort)有点小儿科：简单而低效。我们会线性逐一扫描数组元素，从中挑出最小的元素，将它移到最前面(也就是与最前面的元素交换)。然后，再次线性扫描数组，找到第二小的元素，并移到前面。如此反复，直到全部元素各归其位。</li>
<li><p>归并排序|执行时间：平均情况与最差情况为O(nlog(n))，存储空间：看情况。☆☆☆☆☆<br>归并排序是将数组分成两半，这两半分别排序后，再归并在一起。排序某一半时，继续沿用同样的排序算法，最终，你将归并两个只含有一个元素的数组。这个算法的重担都落在“归并”的部分上。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">  	<span class="keyword">int</span> middle = (low + high) /<span class="number">2</span>;</span><br><span class="line">      mergesort(<span class="built_in">array</span>,low,middle);<span class="comment">//排序左半部分</span></span><br><span class="line">      mergesort(<span class="built_in">array</span>,middle+<span class="number">1</span>,high);<span class="comment">//排序右半部分</span></span><br><span class="line">      merge(<span class="built_in">array</span>,low,middle,high);<span class="comment">//归并</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>,<span class="keyword">int</span> low,<span class="keyword">int</span> middle,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] helper = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">array</span>.length];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*将数组左右两半拷贝到helper数组中*/</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = low;i &lt;=high;i++)&#123;</span><br><span class="line">  helper[i] = <span class="built_in">array</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> helperLeft = low;</span><br><span class="line">  <span class="keyword">int</span> helperRight = middle + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> current = low;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   *迭代访问helper数组。比较左，右两半的元素，并将较小的元素复制到原先的数组中。</span><br><span class="line">   */</span></span><br><span class="line">   <span class="keyword">while</span>(helperLeft &lt;= middle &amp;&amp; helperRight &lt;=high)&#123;</span><br><span class="line">     <span class="keyword">if</span>(helper[helperLeft] &lt;= helper[helperRight])&#123;</span><br><span class="line">       <span class="built_in">array</span>[current] = helper[helperLeft];</span><br><span class="line">       helperLeft++;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果右边的元素小于左边的元素</span></span><br><span class="line">       <span class="built_in">array</span>[current] = helper[helperRight];</span><br><span class="line">       helperRight++;</span><br><span class="line">     &#125;</span><br><span class="line">     count++;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span><br><span class="line">    *将数组左半部分剩余元素复制到目标数组中</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">int</span> remaining = middle -- helperLeft;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=remaining;i++)&#123;</span><br><span class="line">      <span class="built_in">array</span>[current + i] = helper[helperLeft + i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] helper = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">array</span>.length];</span><br><span class="line">  mergesort(<span class="built_in">array</span>,helper,<span class="number">0</span>,<span class="built_in">array</span>.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>merge方法会将目标数组的所有元素拷贝到临时数组helper中，并记下数组左,右两半的其实位置(helperLefth和helperRight)。然后，迭代访问helper数组，将左右两半中较小的元素，复制到目标数组中。最后，再将余下所有元素复制回目标数数组。</p>
</li>
<li><p>快速排序|执行时间：平均情况为O(nlog(n))，最差情况为O(n²)，存储空间：O(log(n)).☆☆☆☆☆<br>快速排序是随机挑选一个元素，对数组进行分割，以将所有比它小的元素排在前面，比它大的元素则排在后面。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">quickSort</span>(int arr[],int <span class="keyword">left</span>,int <span class="keyword">right</span>)&#123;</span><br><span class="line">  int index = <span class="built_in">partition</span>(arr,<span class="keyword">left</span>,<span class="keyword">right</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">left</span> &lt; index -<span class="number">1</span>)&#123; <span class="comment">//排序左半部分</span></span><br><span class="line">     <span class="built_in">quickSort</span>(arr,<span class="keyword">left</span>,index - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="keyword">right</span>)&#123; <span class="comment">//排序右半部分</span></span><br><span class="line">    <span class="built_in">quickSort</span>(arr,index,<span class="keyword">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">partition</span>(int arr[],int <span class="keyword">left</span>,int <span class="keyword">right</span>)&#123;</span><br><span class="line">  int pivot = arr[(<span class="keyword">left</span> + <span class="keyword">right</span>)/<span class="number">2</span>];<span class="comment">//挑出一个基准点</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">left</span> &lt;= <span class="keyword">right</span>) &#123;</span><br><span class="line">    <span class="comment">//找出左边中应被放到右边的元素</span></span><br><span class="line">    <span class="keyword">while</span>(arr[<span class="keyword">left</span>] &lt; pivot) <span class="keyword">left</span>++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找出右边中应被放到左边的元素</span></span><br><span class="line">    <span class="keyword">while</span>(arr[<span class="keyword">right</span>] &gt; pivot) <span class="keyword">right</span>--;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//交换元素，同时调整左右索引值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">left</span> &lt;= <span class="keyword">right</span>)&#123;</span><br><span class="line">      <span class="built_in">swap</span>(arr,<span class="keyword">left</span>,<span class="keyword">right</span>);<span class="comment">//交换元素</span></span><br><span class="line">      <span class="keyword">left</span>++;</span><br><span class="line">      <span class="keyword">right</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基数排序|执行时间：O(kn) ☆☆☆☆☆<br>基数排序是个整数(或其他一些数据类型)排序算法，充分利用整数的位数有限这一事实。使用基数排序时，我们会迭代访问数字的每一位，按各个位对这些数字分组。<br>比如说，假设有一个整数数组，我们可以先按个位对这些数字进行分组，于是，个位为0的数字就会分在同一个组里。然后，再按十位进行分组，如此反复执行同样的过程，逐级按更高位进行排序，直到最后整个数组变为有序数组。</p>
</li>
</ul>
</li>
<li><p>查找算法<br>二分查找☆☆☆☆☆ <strong>需要有序</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> high = a.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> mid;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    mid = (low + high) /<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid] &lt; x)&#123;</span><br><span class="line">      low = mid +<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid] &gt; x)&#123;</span><br><span class="line">    high = mid -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearchRecursive</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> x,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low &gt; high) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//错误</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> mid = (low + high) /<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(a[mid] &lt; x)&#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearchRecursive(a,x,mid + <span class="number">1</span>,high);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid] &gt; x)&#123;</span><br><span class="line">   <span class="keyword">return</span> binarySearchRecursive(a,x,low,mid -<span class="number">1</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概念与算法">概念与算法</h1><h2 id="位操作">位操作</h2><ol>
<li>手工位运算<br>1000 - 0110  （0010）<br>1011 &amp; (~0 &lt;&lt; 2) （1000）</li>
<li><p>位操作原理与技]]>
    </summary>
    
      <category term="金典" scheme="http://zc14.github.io/tags/%E9%87%91%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[金典-数据结构]]></title>
    <link href="http://zc14.github.io/2015/12/13/%E9%87%91%E5%85%B8-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://zc14.github.io/2015/12/13/金典-数据结构/</id>
    <published>2015-12-13T13:02:04.000Z</published>
    <updated>2015-12-15T05:07:44.004Z</updated>
    <content type="html"><![CDATA[<h1 id="数据结构">数据结构</h1><h2 id="数组与字符串">数组与字符串</h2><ol>
<li><p>散列表<br>散列表是一种将键(key)映射为值(value)从而实现快速查找的数据结构。<br><strong>核心：底层数组和散列函数(hash function)</strong>.问题：数组过小，碰撞冲突。<br>除了创建按索引hash(key)%array_length的数组元素指向的链表中。要通过某个键来查找对象，就必须根据散列值找到对应的链表，然后在链表中查找对应的键。<br>另外，我们还可以采用<strong>二叉查找树</strong>来实现散列表。只要我们让这棵树保持平衡，就能保证数据能查找用时为O(log n).原因很简单，我们不必一开始就分配一个大数组。</p>
</li>
<li><p>ArrayList(动态数组)</p>
</li>
<li><p>StringBuffer</p>
</li>
</ol>
<h2 id="链表">链表</h2><ol>
<li>创建链表<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class <span class="keyword">Node</span><span class="identifier"></span><span class="title">&#123;</span><br><span class="line">  Node</span> next = null;</span><br><span class="line">  int data;</span><br><span class="line">  </span><br><span class="line">  public <span class="keyword">Node</span><span class="identifier"></span><span class="title">(int</span> d)&#123;</span><br><span class="line">    data = d;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  void appendToTail(int d)&#123;</span><br><span class="line">    <span class="keyword">Node</span><span class="identifier"> </span><span class="title">end</span> = new <span class="keyword">Node</span><span class="identifier"></span><span class="title">(d</span>);</span><br><span class="line">    <span class="keyword">Node</span><span class="identifier"> </span><span class="title">n</span> = this;</span><br><span class="line">    while(n.next != null)&#123;</span><br><span class="line">      n = n.next;</span><br><span class="line">    &#125;</span><br><span class="line">    n.next = end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>删除单向链表中的节点<br>给定一个节点n，我们先找到它的前驱结点prev,并将prev.next设置为n.next.<br>如果是双向链表，我们还要更新n.next.将n.next.prev置为n.prev.当然，我们必须注意：</p>
<ul>
<li>检查空指针。</li>
<li>必要时更新表头head和表尾tail指针。<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Node deleteNode(Node head,int <span class="keyword">d</span>)&#123;</span><br><span class="line">  Node <span class="keyword">n</span> = head;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">n</span>.data == <span class="keyword">d</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> head.next; <span class="comment">/*表头指向下一结点*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">n</span>.next != null) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">n</span>.next.data == <span class="keyword">d</span>)&#123;</span><br><span class="line">      <span class="keyword">n</span>.next  = <span class="keyword">n</span>.next.next;</span><br><span class="line">      <span class="keyword">return</span> head; <span class="comment">/*表头不变*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">n</span> = <span class="keyword">n</span>.next;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>快行指针技巧<br>快行指针值得是同时用两个指针来迭代访问链表，只不过其中一个比另一个超前一些。”快”指针往往先行几步，或与”慢”指针相差固定的步数。<br><em>举个例子，假定有一个链表a1-&gt;a2-&gt;…..-&gt;an-&gt;b1-&gt;b2……-&gt;bn,你想将其重新排列成a1-&gt;b1-&gt;a2-&gt;b2-&gt;…..an-&gt;bn.另外，你不知道该链表的长度(但确定它有偶数个元素)。</em><br>你可以用两个指针，其中p1（快指针）每次都向前移动两步，而同时p2只移动一步。当p1到达链表末尾时，p2刚好位于链表中间位置。然后，再让p1与p2一步步从尾向头反向移动，并将p2指向的结点插入到p1所指结点后面。</p>
</li>
<li><p>递归问题<br>解决链表问题碰壁时，不妨试试递归法能否奏效。</p>
</li>
</ol>
<h2 id="栈与队列">栈与队列</h2><ol>
<li><p>实现一个栈<br>栈(LIFO)</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span>&#123;</span><br><span class="line">  Node top;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span> pop()&#123;</span><br><span class="line">    <span class="keyword">if</span>(top != <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="built_in">Object</span> item = top.data;</span><br><span class="line">      top = top.next;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> push(<span class="built_in">Object</span> item)&#123;</span><br><span class="line">    Node t = <span class="keyword">new</span> Mode(item);</span><br><span class="line">    t.next = top;</span><br><span class="line">    top = t;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span> peek()&#123;</span><br><span class="line">    <span class="keyword">return</span> top.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现一个队列<br>队列采用先进先出(FIFO)顺序。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">class</span> Queue&#123;</span><br><span class="line">  Node <span class="keyword">first</span> ,<span class="keyword">last</span>;</span><br><span class="line">  </span><br><span class="line">  void enqueue(Object <span class="property">item</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">first</span> == null) &#123;</span><br><span class="line">      <span class="keyword">last</span> = new Node(<span class="property">item</span>);</span><br><span class="line">      <span class="keyword">first</span> = <span class="keyword">last</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">last</span>.next = new Node(<span class="property">item</span>);</span><br><span class="line">     <span class="keyword">last</span> = <span class="keyword">last</span>.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> Object dequeue()&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">first</span> != null)&#123;</span><br><span class="line">     Object <span class="property">item</span> = <span class="keyword">first</span>.data;</span><br><span class="line">     <span class="keyword">first</span> = <span class="keyword">first</span>.next;</span><br><span class="line"><span class="command">     return</span> <span class="property">item</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="command">   return</span> null;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="树与图">树与图</h2><ol>
<li><p>需要注意的潜在问题</p>
<ul>
<li>二叉树与二叉查找树<br>二叉查找树的附加条件：对于任意结点，左子结点&lt;=当前结点，后者 由&lt;=所有右子结点</li>
<li>平衡与不平衡<br>如果树是不平衡的，你应当从平均情况和最坏情况所需时间来描述自己的算法。注意，树的平衡有多种方法，平衡一棵树只意味着子树的深度差不会超过一定值，并不表示左子树和右子树的深度完全相同。</li>
<li>完满和完整<br>一棵树必须正好有2n次方-1个结点才能满足这个条件</li>
</ul>
</li>
<li><p>二叉树遍历 尤其是中序遍历考察的比较多</p>
</li>
<li><p>树的平衡：红黑树 和平衡二叉树。面试问的比较少</p>
</li>
<li><p>单词查找树(trie)<br>tire树是n层树的一种变体，其中每个节点存储有字符。整棵树的每条路径自上而下表示一个单词。</p>
</li>
<li><p>图的遍历<br>广度优先搜索(BFS)和深度优先搜索(DFS)</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="数据结构">数据结构</h1><h2 id="数组与字符串">数组与字符串</h2><ol>
<li><p>散列表<br>散列表是一种将键(key)映射为值(value)从而实现快速查找的数据结构。<br><strong>核心：底层数组和散列函数(hash fun]]>
    </summary>
    
      <category term="金典" scheme="http://zc14.github.io/tags/%E9%87%91%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[准备]]></title>
    <link href="http://zc14.github.io/2015/12/13/%E5%87%86%E5%A4%87/"/>
    <id>http://zc14.github.io/2015/12/13/准备/</id>
    <published>2015-12-13T09:43:44.000Z</published>
    <updated>2015-12-13T12:51:32.600Z</updated>
    <content type="html"><![CDATA[<ol>
<li>没有什么比<strong>为兴趣而工作</strong>更能打动招聘人员的了。</li>
<li>公司最青睐的人才必须具备两个特性：一是天资聪颖，二是扎实的编程功底。</li>
<li>还要提前规划好职业发展路径。</li>
<li>建立好的人际网络。好的人际网络不仅意味着你广交朋友(广度),还要与他们保持紧密的联系(深度).尽量与朋友保持<strong>真诚</strong>与<strong>深厚</strong>的关系。</li>
<li>要学会主动跟人打招呼。</li>
<li>最重要的是乐于助人。</li>
</ol>
<h2 id="简历的书写">简历的书写</h2><ul>
<li>简历尽量短<br>[demo]:使用Y实现了X，从而达到了Z效果。<em>通过实施分布式缓存功能减少了75%的对象渲染时间，从而使得用户登录速度加快了10%。</em> <strong>原则：描述做过的事情，怎么做的，以及结果如何。理想的做法是尽可能地量化结果。</strong></li>
<li>编程语言：Java(非常熟练)，C++(熟练)，JavaScript(有过使用经验)。</li>
<li>你有哪些缺点 <strong>应该提到真实，合乎情理的缺点，然后话锋一转，强调自己如何克服这些缺点。</strong> <em>1.有时候，我可能对细节不够重视。好的一面是我反应迅速，执行力强，但不免会粗心大意而犯错。有鉴于此，我总是会找其他同事帮忙检查自己的工作，确保不出问题。</em> <em>2.通过记录笔记/blog的形式，深化记忆</em></li>
<li>项目中最难处理的问题是什么。  离职人员没有交接，造成问题定位困难（手机客户端，umapp端）。修改日志。</li>
<li>你应该问面试官哪些问题 1）真实的问题 <em>你每天有多少时间花在写代码上？</em> <em>你一周要开几次会？</em> 2）有见地的问题 <em>我注意到你们使用了X技术，请问你们是如何处理Y问题的？</em> 3）富有激情的问题 <em>我对可扩展性很感兴趣。请问你从事过分布式系统的工作吗？有哪些机会可以学习这方面的知识？</em> <em>我对X技术不是太熟悉，不过听上去是个不错的解决方案。你能给我多讲讲它的工作原理吗？</em></li>
<li><strong>VS</strong> <em>我几乎包揽了团队中所有的累活和难活。[骄傲自大，面试大忌]</em> <em>我实施了文件系统，因为XXXX原因，这是整个项目中最难的一部分。</em></li>
</ul>
<h2 id="行为面试题">行为面试题</h2><table>
<thead>
<tr>
<th style="text-align:right">常见问题</th>
<th style="text-align:right">项目1</th>
<th style="text-align:right">项目</th>
<th style="text-align:right">项目3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">最难的部分</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">有什么收获</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">最有意思的部分</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">最难解决的bug</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">最享受的过程</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">与团队成员的冲突</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
<p><strong>编写小故事，填写表格。面试前复习。最好小故事浓缩成几个字，便于记忆</strong></p>
<h2 id="基本知识点">基本知识点</h2><table>
<thead>
<tr>
<th style="text-align:right">数据结构</th>
<th style="text-align:right">算法</th>
<th style="text-align:right">概念</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">链表</td>
<td style="text-align:right">广度优先遍历</td>
<td style="text-align:right">位操作</td>
</tr>
<tr>
<td style="text-align:right">二叉树</td>
<td style="text-align:right">深度优先遍历</td>
<td style="text-align:right">单例设计模式</td>
</tr>
<tr>
<td style="text-align:right">单词查找树(trie)</td>
<td style="text-align:right">二分查找法</td>
<td style="text-align:right">工厂设计模式</td>
</tr>
<tr>
<td style="text-align:right">栈</td>
<td style="text-align:right">归并排序</td>
<td style="text-align:right">内存(栈和堆)</td>
</tr>
<tr>
<td style="text-align:right">队列</td>
<td style="text-align:right">快速排序</td>
<td style="text-align:right">递归</td>
</tr>
<tr>
<td style="text-align:right">向量/数组列表</td>
<td style="text-align:right">树的插入</td>
<td style="text-align:right">大O时间</td>
</tr>
<tr>
<td style="text-align:right">散列表</td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
<h2 id="算法题的五种解法">算法题的五种解法</h2><ol>
<li><p>举例法<br><em>给定一个具体时间，计算时针与分针之间的角度。</em><br>[解]：下面以3：27为例。确定3点的时针位置和27分的分针位置，我们可以画出一个时钟。<br>在一下的解法中，h表示小时，m表示分钟。同时，我们假定h的范围[0-23].<br>从这些例子我们可以得出以下规则：</p>
<ul>
<li>分针的角度（从12点整开始算起）：360 x m/60;                              162</li>
<li>时针的角度（从12点整开始算起）：360 x (h%12)/12 + 360 x (m/60) x (1/12)   90 +13.5</li>
<li>时针和分针之间的角度： （30h-5.5m）%360. 148.5    14.58</li>
</ul>
</li>
<li><p>模式匹配法<br><em>一个有序数组的元素经过循环移动，元素的顺序可能是“3 4 5 6 7 1 2”。怎么才能找出数组中最小的那个元素？假设数组中的元素各不相同。</em><br>二分查找，部分有序。找出拐点即可。</p>
</li>
<li><p>简化推广法<br><em>从一本杂志里剪下一些单词可以拼凑成一封勒索信。怎样才能断定勒索信(以字符串表示)是否由某本杂志(即另一个字符串)里的单词组成。</em><br>可以先简化问题：暂时不考虑单词，只当它是字符。<br>推广这个算法，创建一个散列表，将单词映射到其词频上。</p>
</li>
<li><p>简单构造法–最后往往演变成递归法。（数学中的数学归纳法）<br><em>设计一种算法，打印某个字符串所有可能的排列组合。为简单起见，假设字符串中没有重复字符。</em><br>以字符串”abcdefg”为例：<br>只有”a”的情况，结果为：{“a”}<br>然后是”ab”，结果为：{“ab”,”ba”}<br>再然后是”abc”，结果会是什么呢？<br>此时，问题开始变得有点意思了。得到P(ab)的答案，怎么才能生成P(abc)呢？很简单，新字符是c。我们只需要在前一种情况的答案也即字符组合的任意位置加一个c就可以了。也就是：<br>P(abc) = 将”c”字符插入 P(ab)得到的所有字符串的任意位置。<br>亦即：P(abc) = 将”c”字符插入{“ab”,”ba”}这两个字符串中的任意位置。<br>也就是：P(abc) = merge({“cab”,”acb”,”abc”},{“cba”,”bca”,”bac”})<br>最后得出的结果：P(abc) = {“cab”,”acb”,”abc”,”cba”,”bca”,”bac”}.</p>
</li>
<li><p>数据结构头脑风暴<br><em>随机生成一些数字，并保存到一个(可扩展的)数组中。如何跟踪数组的中位数？</em><br>链表？<br>数组？<br>二叉树？<br>堆？</p>
</li>
</ol>
<h2 id="许多公司都想找到能写出“优美，整洁”代码的人才。">许多公司都想找到能写出“优美，整洁”代码的人才。</h2><ol>
<li>正确</li>
<li>高效</li>
<li>简洁</li>
<li>易读</li>
<li>可维护性</li>
</ol>
<p><em>编写一个函数检查某个二进制数(以字符串形式传入)是否等于以字符串表示的十六进制数。</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>没有什么比<strong>为兴趣而工作</strong>更能打动招聘人员的了。</li>
<li>公司最青睐的人才必须具备两个特性：一是天资聪颖，二是扎实的编程功底。</li>
<li>还要提前规划好职业发展路径。</li>
<li>建立好的人际网络。好的人际网]]>
    </summary>
    
      <category term="面试" scheme="http://zc14.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[算法学习]]></title>
    <link href="http://zc14.github.io/2015/12/09/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zc14.github.io/2015/12/09/算法学习/</id>
    <published>2015-12-09T05:26:15.000Z</published>
    <updated>2015-12-09T09:04:18.444Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="学习算法是非常有趣和令人激动的">学习算法是非常有趣和令人激动的</h1><h1 id="最大公约数-(欧几里得算法)">最大公约数-(欧几里得算法)</h1>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_reference">自然语言描述</span>]:<span class="link_url">计算两个非负整数p和q的最大公约数:若q是0，则最大公约数为p。否则，将p除以q得到余数r，p和q的最大公约数即为q和r的最大公约数。</span></span><br></pre></td></tr></table></figure>
<h2 id="基础">基础</h2><h2 id="排序">排序</h2><h2 id="查找">查找</h2><h2 id="图">图</h2><h2 id="字符串">字符串</h2><h2 id="背景">背景</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="学习算法是非常有趣和令人激动的">学习算法是非常有趣和令人激动的</h1><h1 id="最大公约数-(欧几里得算法)">最大公约数-(欧几里得算法)</h1>  <figure class="highlight markdown"><t]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown快速入门]]></title>
    <link href="http://zc14.github.io/2015/12/06/markdown/"/>
    <id>http://zc14.github.io/2015/12/06/markdown/</id>
    <published>2015-12-06T13:48:23.000Z</published>
    <updated>2015-12-06T14:07:16.198Z</updated>
    <content type="html"><![CDATA[<p>简单学习markdown<br><a id="more"></a></p>
<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><h6 id="六级标题">六级标题</h6><p><strong>加粗</strong><br><em>斜体</em><br>这个是<code>行内代码</code>，好玩</p>
<ol>
<li>你好</li>
<li>我好</li>
<li>大家好</li>
</ol>
<p>[TOC]</p>
<ul>
<li>无序1</li>
<li>无序2</li>
<li>无序3</li>
</ul>
<hr>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><del>fffffff</del></p>
<p>==kkkkkkkkk==<br>| 姓名 | 学号 |<br>|——–|——–|<br>|      张三  |       002 |</p>
<!--注释-->]]></content>
    <summary type="html">
    <![CDATA[简单学习markdown]]>
    
    </summary>
    
      <category term="markdown" scheme="http://zc14.github.io/tags/markdown/"/>
    
      <category term="markdown" scheme="http://zc14.github.io/categories/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[临时笔记]]></title>
    <link href="http://zc14.github.io/2015/12/06/%E4%B8%B4%E6%97%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://zc14.github.io/2015/12/06/临时笔记/</id>
    <published>2015-12-06T07:53:01.000Z</published>
    <updated>2015-12-11T12:51:21.953Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="记录临时学习内容">记录临时学习内容</h1><h2 id="Java的设计优化_提高性能的5种[设计模式]_^-^">Java的设计优化 提高性能的5种[设计模式] ^.^</h2><h3 id="单例模式">单例模式</h3><h3 id="代理模式">代理模式</h3>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">静态代理： 抽象接口/真实对象/代理对象--可用于[延迟加载]</span><br><span class="line">动态代理： jdk/cglib</span><br><span class="line">           apache commons ArrayUtils.<span class="function"><span class="title">contains</span><span class="params">(xx,xx)</span></span> ,可以增加某些操作的日志过滤</span><br></pre></td></tr></table></figure>
<p>  <strong>待完成题目</strong> <em>运用spring拦截器，进行用户操作行为的记录[user/ip/method/time]</em></p>
<h3 id="享元模式">享元模式</h3>  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">核心：克隆 或者 从享元工厂的<span class="preprocessor">Map</span>中获取</span><br></pre></td></tr></table></figure>
<h3 id="装饰者模式">装饰者模式</h3>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">核心：动态添加对象的功能，如java中的<span class="built_in">io</span>类</span><br></pre></td></tr></table></figure>
<h3 id="观察者模式">观察者模式</h3>  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主题<span class="keyword">Subject </span>抽象/具体 (添加/删除/循环通知)</span><br><span class="line">观察者Observer update</span><br></pre></td></tr></table></figure>
<p>  <strong>待完成题目</strong> <em>考试系统-学生/考试</em></p>
<h2 id="缓存的应用">缓存的应用</h2>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(局部缓存/全局缓存)</span><br><span class="line">jsp标签实现页面级的局部缓存 - OSCache</span><br><span class="line">局部缓存在开发中 不如 全局缓存用的多</span><br><span class="line">全局缓存<span class="comment">--过滤器filter</span></span><br></pre></td></tr></table></figure>
<h2 id="Java程序优化">Java程序优化</h2><ul>
<li>集合类的相关[插入/删除]性能对比</li>
<li>集合类的相关[查找]性能对比</li>
</ul>
<h2 id="常用的提高性能方式">常用的提高性能方式</h2><ol>
<li>工具类多用静态方法</li>
<li>重量级对象的创建使用Clone(√)方法代替new关键字,注意深克隆和浅克隆，apache commons的是深度克隆</li>
<li>io操作尽可能的使用Buffer，性能提高不少</li>
<li>对于数据复制，尽量使用System.arrayCopy()</li>
<li>bool运算(&amp;&amp;)(√) 和 位运算,做逻辑判断的时候，前者效率高于后者</li>
<li>普通循环赋值 和 分批次循环赋值(√)  后者效率高</li>
<li>提取表达式，比如for循环时候的变量定义等</li>
<li>array 下标/switch/if else的效率</li>
<li>位运算代替乘法</li>
<li>局部变量(√) 和 成员变量,前者效率较高</li>
<li>一维数组(√) 性能 高于 二维数组</li>
</ol>
<h2 id="NIO">NIO</h2><ul>
<li>文件内存映射，效率很高</li>
<li>Channel/Buffer</li>
<li>Fork/Join</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="记录临时学习内容">记录临时学习内容</h1><h2 id="Java的设计优化_提高性能的5种[设计模式]_^-^">Java的设计优化 提高性能的5种[设计模式] ^.^</h2><h3 id="单例模式">单例模式</h3><h3 ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://zc14.github.io/2015/12/06/hello-world/"/>
    <id>http://zc14.github.io/2015/12/06/hello-world/</id>
    <published>2015-12-06T06:32:43.000Z</published>
    <updated>2015-12-06T07:49:07.676Z</updated>
    <content type="html"><![CDATA[<p>开始新的征程.</p>
<h2 id="主标题">主标题</h2><h3 id="副标题1">副标题1</h3><h3 id="副标题2">副标题2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 命令行语句</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://zc14.github.io/">More</a></p>
]]></content>
    <summary type="html">
    <![CDATA[入门页面，认识下简单的样式]]>
    
    </summary>
    
      <category term="开始" scheme="http://zc14.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
      <category term="hello" scheme="http://zc14.github.io/categories/hello/"/>
    
  </entry>
  
</feed>
